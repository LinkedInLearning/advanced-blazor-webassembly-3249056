@using MyBlazorShopHosted.Libraries.Shared.Product.Models
@using MyBlazorShopHosted.Libraries.Shared.ShoppingCart.Models
@using MyBlazorShopHosted.Web.Client.Shared.Layout
@using System.Text.Json
@page "/product/{slug}"
@inject NavigationManager navigationManager
@inject HttpClient httpClient
@inject IConfiguration configuration
@if (Product != null)
{
    <PageTitle>@Product.Name</PageTitle>
    <HeadContent>
        <meta name="description" content="@Product.Name product page" />
    </HeadContent>
}
   <main class="margin-horizontal:auto max-width:container padding-horizontal:32">
       <div id="vue-product-detail" class="quenched">
           <div class="margin-bottom:32 @@mq-960--margin-top:32">
               <div class="display:flex flex-wrap:wrap flex-grow:1 margin-bottom:-32 margin-horizontal:-16">
                @if (Product == null)
                {
                    <div class="display:flex flex-direction:column flex-grow:0 flex-shrink:0 margin-bottom:32 padding-horizontal:16 width:100 @@mq-768--width:50">
                        <p>Not found</p>
                    </div>
                }
                else {
                    <div class="display:flex flex-direction:column flex-grow:0 flex-shrink:0 margin-bottom:32 padding-horizontal:16 width:100 @@mq-768--width:50">
                       <img src="images/@Product.Image" alt="Photo of @Product.Name" class="margin-bottom:32 max-width:100" />
                   </div>
                   <div class="display:flex flex-direction:column flex-grow:0 flex-shrink:0 margin-bottom:32 padding-horizontal:16 width:100 @@mq-768--width:50">
                       <h1 class="font-weight:500 font-size:28 line-height:1_142 margin-bottom:24 @@mq-768--font-size:32 @@mq-768--line-height:1_125">@Product.Name</h1> 
                       <p class="font-weight:500 font-size:28 line-height:1_142 margin-bottom:24">@Product.Price.ToString("c")</p>
                        <div class="display:flex flex-wrap:wrap">
                            <EditForm Model="ProductAddToCartModel" OnValidSubmit="AddToCartAsync">
                                <DataAnnotationsValidator />
                                <ValidationMessage For="() => ProductAddToCartModel.Quantity" />

                                <InputNumber @bind-Value="ProductAddToCartModel.Quantity" class="padding:12 &:hocus--border-color:neutral-000000 appearance:none background-color:neutral-ffffff border-color:neutral-4c5b5c border-radius:0 border-style:solid border-width:1 color:neutral-483e40 min-height:form-input width:100" autocomplete="off" />
                                <button class="display:inline-block padding-horizontal:24 padding-horizontal:24 &amp;:hocus--background-color:yellow-f0c808 background-color:orange-ff583d color:neutral-222224 font-size:18 font-weight:700 line-height:1 margin-bottom:32 padding-vertical:12 padding-vertical:16">
                                    @if (HasProductInCart)
                                    {
                                        <span>
                                            Added to cart.
                                        @if (ProductAddToCartModel.Quantity.HasValue)
                                            {
                                                <text>Add @ProductAddToCartModel.Quantity more?</text>
                                            }
                                        </span>
                                    }
                                    else
                                    {
                                        <span>
                                            Add @ProductAddToCartModel.Quantity to Cart?
                                        </span>
                                    }
                                </button>
                            </EditForm>                            
                       </div>
                        @if (AllProducts != null)
                        {
                            <ul>
                                @foreach (var product in AllProducts)
                                {
                                    <li><a href="@product.FullUrl">@product.Name</a></li>
                                }
                            </ul>
                        }
                   </div>               
               }
               </div>
           </div>
       </div>
    </main>
@code {
    private ProductModel? Product { get; set; }

    private bool HasProductInCart { get; set; }

    [Parameter]
    public string? Slug { get; set; }

    private IList<ProductModel>? AllProducts { get; set; }

    private ProductAddToCartModel ProductAddToCartModel = new ProductAddToCartModel();

    [CascadingParameter(Name="ShoppingCartCountModel")]
    private ShoppingCartCountModel? ShoppingCartCountModel { get; set; }

    [CascadingParameter]
    public Error? Error { get; set; }
}
@functions {
    protected override async Task OnInitializedAsync()
    {
        // Get product listing.
        AllProducts = await httpClient.GetFromJsonAsync<IList<ProductModel>>(
            "/api/product"
        );

        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(Slug))
            {
                Product = await httpClient.GetFromJsonAsync<ProductModel?>(
                    string.Format("/api/product/by-slug/{0}", Slug)
                );
                if (Product != null)
                {
                    HasProductInCart = await httpClient.GetFromJsonAsync<bool>(
                            string.Format("/api/shopping-cart/has-product/{0}", Product.Sku)
                    );
                }
            }
        }
        catch (Exception ex) {
            Error?.ProcessError(ex);
        }
    }

    private async Task AddToCartAsync()
    {
        if (Product != null)
        {
            // Add to shopping cart
            if (!HasProductInCart)
            {
                var request = new HttpRequestMessage(HttpMethod.Post, "/api/shopping-cart");
                request.Content = new StringContent(JsonSerializer.Serialize(new ShoppingCartAddModel
                    {
                        ProductSku = Product.Sku,
                        Quantity = ProductAddToCartModel.Quantity ?? 1
                    }), System.Text.Encoding.UTF8, "application/json");

                await httpClient.SendAsync(request);
            }
            else
            {
                var request = new HttpRequestMessage(HttpMethod.Put, "/api/shopping-cart");
                request.Content = new StringContent(JsonSerializer.Serialize(new ShoppingCartAddModel
                    {
                        ProductSku = Product.Sku,
                        Quantity = ProductAddToCartModel.Quantity ?? 1
                    }), System.Text.Encoding.UTF8, "application/json");

                await httpClient.SendAsync(request);
            }

            HasProductInCart = await httpClient.GetFromJsonAsync<bool>(
                string.Format("/api/shopping-cart/has-product/{0}", Product.Sku)
            );

            ProductAddToCartModel.Quantity = null;

            if (ShoppingCartCountModel != null) {
                ShoppingCartCountModel.OnCountChange();
            } 

            navigationManager.NavigateTo("/cart");
        }
    }
}