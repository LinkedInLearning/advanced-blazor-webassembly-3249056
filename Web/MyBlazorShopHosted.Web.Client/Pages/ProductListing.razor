@using MyBlazorShopHosted.Libraries.Shared.Product.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@page "/"
@inject NavigationManager navigationManager
@inject IConfiguration configuration
@inject IWebAssemblyHostEnvironment environment
@inject HttpClient httpClient
@inject ILogger<ProductListing> logger
<PageTitle>Product listings</PageTitle>
<HeadContent>
    <meta name="description" content="Product listing page" />
</HeadContent>
<section id="products">
@if (Products?.Any() ?? false)
{
    <dl class="prod-list">
        <ErrorBoundary @ref="ProductErrorBoundary">
        <ChildContent>
            @foreach (var product in Products)
            {
                <ProductListingItem Product="product"></ProductListingItem>
            }
        </ChildContent>
        <ErrorContent>
            <p>There is a problem with the products</p>
        </ErrorContent>
        </ErrorBoundary>
    </dl>
    @*
    <main class="margin-horizontal:auto max-width:container padding-horizontal:32">
        <div id="vue-shop" class="margin-bottom:32 quenched">
            <div class="display:flex flex-grow:1 flex-wrap:wrap margin-bottom:-32 margin-horizontal:-16">
                <div class="display:flex flex-direction:column flex-grow:0 flex-shrink:0 margin-bottom:32 padding-horizontal:16 width:100 @@mq-768--width:100">
                    <ErrorBoundary @ref="ProductErrorBoundary">
                    <ChildContent>
                        <ul class="display:flex flex-grow:1 flex-wrap:wrap margin-bottom:-32 margin-horizontal:-16">
                            @foreach(var product in Products)
                            {
                                <ProductListingItem Product="product"></ProductListingItem>
                            }                        
                        </ul>
                       </ChildContent>
                       <ErrorContent>
                           <p>There is a problem with the products</p>
                       </ErrorContent>
                    </ErrorBoundary>
                    @if (TotalPageCount > 1) {
                        <ul class="pages">
                            @for (var page = 1; page <= TotalPageCount; page++) {
                                <li><a href="@navigationManager.GetUriWithQueryParameter("page", page)">@(page)</a></li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
    </main>
    *@
}
</section>

@code {
    private ErrorBoundary? ProductErrorBoundary;

    private IList<ProductModel>? Products { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public int? Page { get; set; }

    private int TotalPageCount { get; set; }
}
@functions {
    protected override async Task OnParametersSetAsync()
    {
        ProductErrorBoundary?.Recover();

        var productListingConfig = configuration.GetSection("ProductListing");
        var pageSize = productListingConfig.GetValue<int>("PageSize");

        Products = await httpClient.GetFromJsonAsync<IList<ProductModel>?>(
            string.Format("/api/product?size={0}&page={1}",
            pageSize,
            Page ?? 1
            )
        );
        TotalPageCount = await httpClient.GetFromJsonAsync<int>(
            string.Format("/api/product/total-page-count?size={0}",
            pageSize
            )
        );

        await base.OnParametersSetAsync();
    }
}