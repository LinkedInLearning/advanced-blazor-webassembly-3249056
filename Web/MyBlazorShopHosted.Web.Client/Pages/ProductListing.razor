@using MyBlazorShopHosted.Libraries.Shared.Product.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@page "/"
@inject NavigationManager navigationManager
@inject IConfiguration configuration
@inject IWebAssemblyHostEnvironment environment
@inject HttpClient httpClient
@inject ILogger<ProductListing> logger
<PageTitle>Product listings</PageTitle>
<HeadContent>
    <meta name="description" content="Product listing page" />
</HeadContent>
@if (Products?.Any() ?? false)
{
    <section id="products">
        <header>
            <h1>Products</h1>
            <nav aria-label="Breadcrumb">
                <ol itemscope itemtype="https://schema.org/BreadcrumbList">
                    <li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem">
                        <a href="/" itemprop="item"><span itemprop="name">Shop</span></a>
                        <meta itemprop="position" content="1">
                        <span aria-hidden="true">&rsaquo;</span>
                    </li>
                </ol>
            </nav>
        </header>

        <dl class="prod-list">
            <ErrorBoundary @ref="ProductErrorBoundary">
                <ChildContent>
                    @foreach (var product in Products)
                    {
                        <ProductListingItem Product="product"></ProductListingItem>
                    }
                </ChildContent>
                <ErrorContent>
                    <p>There is a problem with the products</p>
                </ErrorContent>
            </ErrorBoundary>
        </dl>    
        @if (TotalPageCount > 1)
        {
            <nav aria-label="Pagination">
                <ul>
                    @for (var p = 1; p<= TotalPageCount; p++)
                    {
                        var linkAttributes = new Dictionary<string, object>();

                        var link = "/";
                        if (p == (Page ?? 1))
                        {
                            linkAttributes.Add("aria-current", "page");
                        }
                        if (p >= 2)
                        {
                            link += string.Format("?page={0}", p);
                        }

                        linkAttributes.Add("href", link);

                        <li><a @attributes="linkAttributes"><span class="visually-hidden">Page</span> @p</a></li>
                    }
			    </ul>
		    </nav>
        }
    </section>
}
@code {
    private ErrorBoundary? ProductErrorBoundary;

    private IList<ProductModel>? Products { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public int? Page { get; set; }

    private int TotalPageCount { get; set; }
}
@functions {
    protected override async Task OnParametersSetAsync()
    {
        ProductErrorBoundary?.Recover();

        var productListingConfig = configuration.GetSection("ProductListing");
        var pageSize = productListingConfig.GetValue<int>("PageSize");

        Products = await httpClient.GetFromJsonAsync<IList<ProductModel>?>(
            string.Format("/api/product?size={0}&page={1}",
            pageSize,
            Page ?? 1
            )
        );
        TotalPageCount = await httpClient.GetFromJsonAsync<int>(
            string.Format("/api/product/total-page-count?size={0}",
            pageSize
            )
        );

        await base.OnParametersSetAsync();
    }
}