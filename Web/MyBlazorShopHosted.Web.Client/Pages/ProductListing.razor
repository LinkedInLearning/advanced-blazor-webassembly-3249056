@using MyBlazorShopHosted.Libraries.Shared.Product.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@page "/"
@inject NavigationManager navigationManager
@inject HttpClient httpClient
@inject ILogger<ProductListing> logger
@inject PersistentComponentState componentState
<PageTitle>Product listings</PageTitle>
<HeadContent>
    <meta name="description" content="Product listing page" />
</HeadContent>
@if (Products?.Any() ?? false)
{
    <section id="products">
        <header>
            <h1>Products</h1>
            <nav aria-label="Breadcrumb">
                <ol itemscope itemtype="https://schema.org/BreadcrumbList">
                    <li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem">
                        <a href="/" itemprop="item"><span itemprop="name">Shop</span></a>
                        <meta itemprop="position" content="1">
                        <span aria-hidden="true">&rsaquo;</span>
                    </li>
                </ol>
            </nav>
        </header>

        <dl class="prod-list">
            @foreach (var product in Products)
            {
                <ProductListingItem Product="product"></ProductListingItem>
            }
        </dl>    
        @if (TotalPageCount > 1)
        {
            <nav aria-label="Pagination">
                <ul>
                    @for (var p = 1; p<= TotalPageCount; p++)
                    {
                        var linkAttributes = new Dictionary<string, object>();

                        var link = "/";
                        if (p == (Page ?? 1))
                        {
                            linkAttributes.Add("aria-current", "page");
                        }
                        if (p >= 2)
                        {
                            link += string.Format("?page={0}", p);
                        }

                        linkAttributes.Add("href", link);

                        <li><a @attributes="linkAttributes"><span class="visually-hidden">Page</span> @p</a></li>
                    }
			    </ul>
		    </nav>
        }
    </section>
}
@code {
    private IList<ProductModel>? Products { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public int? Page { get; set; }

    private int TotalPageCount { get; set; }
}
@functions {
    protected override Task OnInitializedAsync()
    {
        componentState.RegisterOnPersisting(() => StoreProducts());
        componentState.RegisterOnPersisting(() => StoreTotalPageCount());

        return base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        var pageSize = 8;

        if (componentState.TryTakeFromJson<IList<ProductModel>?>("products", out var products))
        {
            Products = products;
        }
        else
        {
            Products = await httpClient.GetFromJsonAsync<IList<ProductModel>?>(
                string.Format("/api/product?size={0}&page={1}",
                pageSize,
                Page ?? 1
                )
            );
        }

        if (componentState.TryTakeFromJson<int>("totalPageCount", out var totalPageCount))
        {
            TotalPageCount = totalPageCount;
        }
        else
        {
            TotalPageCount = await httpClient.GetFromJsonAsync<int>(
                string.Format("/api/product/total-page-count?size={0}",
                pageSize
                )
            );
        }

        await base.OnParametersSetAsync();
    }

    private Task StoreProducts()
    {
        componentState.PersistAsJson<IList<ProductModel>?>("products", Products);
        return Task.CompletedTask;
    }

    private Task StoreTotalPageCount()
    {
        componentState.PersistAsJson<int>("totalPageCount", TotalPageCount);
        return Task.CompletedTask;
    }
}