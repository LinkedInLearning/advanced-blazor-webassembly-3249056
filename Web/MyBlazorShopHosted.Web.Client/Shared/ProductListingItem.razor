@using MyBlazorShopHosted.Libraries.Shared.Product.Models;
@using MyBlazorShopHosted.Libraries.Shared.ShoppingCart.Models
@using System.Text.Json
@inject NavigationManager navigationManager
@inject HttpClient httpClient
@inject IConfiguration configuration
@inject IJSRuntime jsRuntime

@if (Product != null)
{
    <div>
        <dt>
            <a href="@Product.FullUrl">@Product.Name</a>
        </dt>
        <dd>
            <a href="@Product.FullUrl" role="presentation" tabindex="-1">
                <img src="/images/@Product.Image" alt="@Product.Name" style="padding: 0 7.143%;" @ref="ProductImageRef">
            </a>
        </dd>
        <dd class="offer">@Product.Price.ToString("c")</dd>
        <dd class="desc">@Product.Description</dd>
    </div>
}
@code {
    [Parameter]
    public ProductModel? Product { get; set; }

    private bool HasProductInCart { get; set; }

    private int? Quantity { get; set; }

    [CascadingParameter(Name="ShoppingCartCountModel")]
    private ShoppingCartCountModel? ShoppingCartCountModel { get; set; }

    private IJSObjectReference? StreamImageModule { get; set; }

    private ElementReference ProductImageRef;
}
@functions {
    protected override async Task OnParametersSetAsync()
    {
        if (StreamImageModule == null)
        {
            StreamImageModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "/js/StreamImage.js");
        }

        if (Product != null)
        {
            HasProductInCart = await httpClient.GetFromJsonAsync<bool>(
                    string.Format("/api/shopping-cart/has-product/{0}", Product.Sku)
            );
        }

        await base.OnParametersSetAsync();
    }

    private async Task<Stream?> StreamImageAsync()
    {
        if (Product == null)
        {
            return null;
        }

        return await httpClient.GetStreamAsync("/images/" + Product.Image);        
    }
}